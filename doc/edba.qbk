[/ Copyright (C) 2013 Kozlov Taras ]
[/ Distributed under the Boost Software License, Version 1.0 ]
[/ (see accompanying file LICENSE_1_0.txt or a copy at ]
[/ http://www.boost.org/LICENSE_1_0.txt) ]
[/ Home at https://github.com/tarasko/cppan ]

[library edba
    [quickbook 1.6]
    [version 1.0]
    [copyright 2013, Kozlov Taras]
    [purpose Uniform modern C++ interface over different database backends]
    [license
        Distributed under the Boost Software License, Version 1.0
        (see accompanying file LICENSE_1_0.txt or a copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[def __boost_fusion__ [@http://www.boost.org/doc/libs/1_54_0/libs/fusion/doc/html Boost.Fusion]]
[def __boost_preprocessor__ [@http://www.boost.org/doc/libs/1_54_0/libs/preprocessor/doc/index.html Boost.Preprocessor]]
[def __boost_mpl__ [@http://www.boost.org/doc/libs/1_54_0/libs/mpl/doc/index.html Boost.MPL]]

[def __sp__			 [classref edba::session_pool session_pool]]
[def __sp_open__     [memberref edba::session_pool::open session_pool::open]]
[def __sp_try_open__ [memberref edba::session_pool::try_open session_pool::try_open]]

[def __st_bind__      [memberref edba::statement::bind(int edba::statement::bind]]
[def __st_bind_null__ [memberref edba::statement::bind(int edba::statement::bind_null]]

[section Introduction]

[@https://github.com/tarasko/cppan] library repository page
[endsect]

[section Tutorial]

[section Hello World]
Let`s start from simple example

[import ../tests/example_simple.cpp]
[example_simple]
Program output:
``
Rows affected by last statement: 1
Last insert row id: 2
id: 1   dt: 2013-Jul-14 txt: 1
id: 2   dt: 2013-Jul-14 txt: 0
``
[endsect]

[section Connecting to Database]
[heading Obtain Session]
The session instance can be obtained by constructing explicitly from driver and connection string or by using __sp_open__ and __sp_try_open__ methods. 
``
session sess(driver::sqlite3(), "db=test.db");

session_pool pool(driver::sqlite3(), "db=test.db");
...
session sess = pool.open(); // Block if all sessions are busy now
...
session sess;
if (pool.try_open(sess))    // Will not block but return false if there are no available sessions in pool
{    
	// Got it
}
``
[heading Connection String Format]
edba connection string consists of the following parts:

Set of key = value pairs separated with ";" symbol. Where value can be put in single quotation marks ' and double quotation mark represents a single one (like in SQL syntax).
For example:
``
database=test;user=joe;password='d''eep secret'
``
Represent user "joe" and password "d'eep secret".
[br]
There are special keys that used as internal edba options rather then connection options. Such keys are always start with @ symbol. For example: 
``
database=test;user=joe;password='d''eep secret';@use_prepared=off`.
``
See [link edba.options Connection String Options] section for the list of all edba core and backends options

[endsect]

[section Preparing and Executing Statements]
[heading Creating a Statement]
The [classref edba::statement] objects can be created by either calling [memberref edba::session::create_statement] or [memberref edba::session::prepare_statement] functions. 
Prepared statements have separated compile and execution steps. They are also cached by edba for future reuse. 
Non-prepared statements should be created by edba::session::create_statement() and are mostly useful when executed rarely.
[br]
Syntactic sugar operator<< can be used to create both prepared and unprepared statements
``
statement st = sess << "select * from test";        // Prepare and cache statement
statement st = sess.once() << "select * from test"; // Create unprepared statement
``

[heading Binding Parameters]
Statement may contain placeholders marked with ":placeholdername" for parameters that should be binded. 
Values for placeholders can be bound by their index implicitly or explicitly or by name using
[memberref edba::statement::operator<<] or __st_bind__ functions. 
The index is starting from 1.
``
statement st = sess << "insert into test(v1, v2, v3) values(:p1, :p2, :p3)"
st.bind("Hello");
st.bind(2, "world");
st.bind("p3", "!!!");
``
__st_bind__ return reference to statement, so it can be rewritten in chained form
``
st.bind("Hello").bind("world").bind("!!!");
``
You may use [memberref edba::statement::operator<<] and [funcref edba::use] to put it in another way
``
statement st = sess 
  << "insert into test(v1, v2, v3) values(:p1, :p2, :p3)"
  << "Hello"
  << use(2, "world");
  << use("p3", "!!!");
``
Placeholder names in a query may repeat, this allow to bind same value in multiple places
``
statement st = sess 
  << "insert into test(v1, v2, v3, v4) values(:v1, :v2, :v1, :v2)"
  << use("v1", 10)
  << use("v2", "Hello world");
``
[note Internally edba emulate binding by name for those backend who don't support it natively.
Please use `:placeholdername` syntax and don't bother about actual backend you`ve bin using]

To bind null values you may either directly call __st_bind_null__ or use special `edba::null` value.
``
statement st = sess 
  << "insert into test(v1, v2, v3) values(:p1, :p2, :p3)"
  << null
  << "Hello"
  << "world";
``
[caution Some backends allow to bind parameters only in increasing order.
`` 
statement st = sess 
  << "insert into test(v1, v2) values(:p1, :p2)"
  << use("p2", "world")
  << use("p1", "Hello");  // ODBC backend will throw exception here
``
However you may skip parameters, such parameters will be implicitly bound to null.
`` 
statement st = sess 
  << "insert into test(v1, v2, v3) values(:p1, :p2, :p3)"
  << use("p1", "Hello")
  << use("p3", "world");
  
// Correct, p2 is bound to null
``
]
[endsect]

[section Fetching query results]
[endsect]

[section Using Session Pool]
[endsect]

[section Handling Transactions]
[endsect]

[section Escaping Strings]
[endsect]

[section Extending Types Support]
[endsect]

[section Syntax for Database Specific Statements]
[endsect]

[section Multithreading]
All objects, except session_pool are NOT thread-safe. Simple and efficient approach is to use __sp__ 
to get session whenever you need to do query and release it after the job is done.
[endsect]

[section String Conversions]
[endsect]

[section Monitoring Statement Execution]
[endsect]

[endsect]

[section:options Connection String Options]
[endsect]

[xinclude reference.xml]
