[/ Copyright (C) 2013 Kozlov Taras ]
[/ Distributed under the Boost Software License, Version 1.0 ]
[/ (see accompanying file LICENSE_1_0.txt or a copy at ]
[/ http://www.boost.org/LICENSE_1_0.txt) ]
[/ Home at https://github.com/tarasko/cppan ]

[library edba
    [quickbook 1.6]
    [version 1.0]
    [copyright 2013, Kozlov Taras]
    [purpose Uniform modern C++ interface over different database backends]
    [license
        Distributed under the Boost Software License, Version 1.0
        (see accompanying file LICENSE_1_0.txt or a copy at
        [@http://www.boost.org/LICENSE_1_0.txt])
    ]
]

[def __boost_any__ [@http://www.boost.org/doc/libs/1_55_0/libs/any/doc/html Boost.Any]]
[def __boost_fusion__ [@http://www.boost.org/doc/libs/1_55_0/libs/fusion/doc/html Boost.Fusion]]
[def __boost_preprocessor__ [@http://www.boost.org/doc/libs/1_55_0/libs/preprocessor/doc/index.html Boost.Preprocessor]]
[def __boost_mpl__ [@http://www.boost.org/doc/libs/1_55_0/libs/mpl/doc/index.html Boost.MPL]]

[def __s_get_specific__ [memberref edba::session::get_specific]]
[def __s_set_specific__ [memberref edba::session::set_specific]]

[def __sp__			 [classref edba::session_pool]]
[def __sp_open__     [memberref edba::session_pool::open]]
[def __sp_try_open__ [memberref edba::session_pool::try_open]]

[def __st_bind__      [memberref edba::statement::bind(int edba::statement::bind]]
[def __st_bind_null__ [memberref edba::statement::bind(int edba::statement::bind_null]]
[def __st_query__      [memberref edba::statement::bind(int edba::statement::query]]
[def __st_first_row__  [memberref edba::statement::first_row]]

[def __rs__			 [classref edba::rowset]]
[def __rs_begin__    [memberref edba::rowset::begin]]

[def __r__			 [classref edba::row]]
[def __r_get__		[memberref edba::row::fetch(int edba::statement::get]]
[def __r_fetch__		[memberref edba::row::fetch(int edba::statement::fetch]]

[def __empty_row_access__  [classref edba::empty_row_access]]
[def __multiple_rows_query__ [classref edba::multiple_rows_query]]

[section Introduction]

[@https://github.com/tarasko/cppan] library repository page
[endsect]

[section:tutorial Tutorial]

[section Hello World]
Let`s start from simple example

[import ../tests/example_simple.cpp]
[example_simple]
Program output:
``
Rows affected by last statement: 1
Last insert row id: 2
id: 1   dt: 2013-Jul-14 txt: 1
id: 2   dt: 2013-Jul-14 txt: 0
``
[endsect]

[section Connecting to Database]
[heading Obtain Session]
The session instance can be obtained by constructing explicitly from driver and connection string or by using __sp_open__ and __sp_try_open__ methods. 
``
session sess(driver::sqlite3(), "db=test.db");

session_pool pool(driver::sqlite3(), "db=test.db");
...
session sess = pool.open(); // Block if all sessions are busy now
...
session sess;
if (pool.try_open(sess))    // Will not block but return false if there are no available sessions in pool
{    
	// Got it
}
``
[heading Connection String Format]
edba connection string consists of the following parts:

Set of key = value pairs separated with ";" symbol. Where value can be put in single quotation marks ' and double quotation mark represents a single one (like in SQL syntax).
For example:
``
database=test;user=joe;password='d''eep secret'
``
Represent user "joe" and password "d'eep secret".
[br]
There are special keys that used as internal edba options rather then connection options. Such keys are always start with @ symbol. For example: 
``
database=test;user=joe;password='d''eep secret';@use_prepared=off
``
See [link edba.options Connection String Options] section for the list of all edba core and backends options

[endsect]

[section Preparing and Executing Statements]
[heading Creating a Statement]
The [classref edba::statement] objects can be created by either calling [memberref edba::session::create_statement] or [memberref edba::session::prepare_statement] functions. 
Prepared statements have separated compile and execution steps. They are also cached by edba for future reuse. 
Non-prepared statements should be created by edba::session::create_statement() and are mostly useful when executed rarely.
[br]
Syntactic sugar operator<< can be used to create both prepared and unprepared statements
``
statement st = sess << "select * from test";        // Prepare and cache statement
statement st = sess.once() << "select * from test"; // Create unprepared statement
``

[heading Binding Parameters]
Statement may contain placeholders marked with ":placeholdername" for parameters that should be binded. 
Values for placeholders can be bound by their index implicitly or explicitly or by name using
[memberref edba::statement::operator<<] or __st_bind__ functions. 
The index is starting from 1.
``
statement st = sess << "insert into test(v1, v2, v3) values(:p1, :p2, :p3)"
st.bind("Hello");
st.bind(2, "world");
st.bind("p3", "!!!");
``
__st_bind__ return reference to statement, so it can be rewritten in chained form
``
st.bind("Hello").bind("world").bind("!!!");
``
You may use [memberref edba::statement::operator<<] and [funcref edba::use] to put it in another way
``
statement st = sess 
  << "insert into test(v1, v2, v3) values(:p1, :p2, :p3)"
  << "Hello"
  << use(2, "world");
  << use("p3", "!!!");
``
Placeholder names in a query may repeat, this allow to bind same value in multiple places
``
statement st = sess 
  << "insert into test(v1, v2, v3, v4) values(:v1, :v2, :v1, :v2)"
  << use("v1", 10)
  << use("v2", "Hello world");
``
[note Internally edba emulate binding by name for those backend who don't support it natively.
Please use `:placeholdername` syntax and don't bother about actual backend you`ve bin using]

To bind null values you may either directly call __st_bind_null__ or use special `edba::null` value.
``
statement st = sess 
  << "insert into test(v1, v2, v3) values(:p1, :p2, :p3)"
  << null
  << "Hello"
  << "world";
``
[caution Some backends allow to bind parameters only in increasing order.
`` 
statement st = sess 
  << "insert into test(v1, v2) values(:p1, :p2)"
  << use("p2", "world")
  << use("p1", "Hello");  // ODBC backend will throw exception here
``
However you may skip parameters, such parameters will be implicitly bound to null.
`` 
statement st = sess 
  << "insert into test(v1, v2, v3) values(:p1, :p2, :p3)"
  << use("p1", "Hello")
  << use("p3", "world");
  
// Correct, p2 is bound to null
``
]
[endsect]

[section Fetching query results]
The result is represented by __rs__ class. It stores the query result. To execute query, either call 
__st_query__ function or just convert statement to __rs__

``
edba::statement st = sess << "SELECT name,age FROM students";
edba::rowset<> rs = st.query();

// or simply
edba::rowset<> rs = sess << "SELECT name,age FROM students";
``
__rs__ is template class with default argument equal to __r__

``
template<typename T = row> class rowset { ... };
``

That means rowset<> is a collection of __r__ objects. Each row object represents fetched tuple in generic way and allows 
to get particular values using __r_fetch__ and __r_get__ methods. 
[br]
__rs__ type implement SinglePassRange concept defined by Boost.Range and thus allows you to iterate rows either using 
BOOST_FOREACH or C++11 range based for operator.

``
edba::rowset<> rs = sess << "SELECT name,age FROM students";
BOOST_FOREACH(row r, rs)  // if C++11, can be for(row r : rs)
{
	int id = r.get<int>();  // throws exception if id is null
	string name;
	if(!r.fetch(name))      // return false if name is null
		...
}
``
You may fetch data either sequentally as in example above or by explicitly providing column name or index (starts for 0)
``
string name = r.get<string>(1);
// or
string name = r.get<string>("name");
``
Syntactic sugar is available as well
``
int id;
string name;
r >> id >> name;
// or explicitly by index or column name
r >> into(0, id) >> into("name", name)
``
[heading Fetching a Single Row]
Sometimes it is useful to fetch a single row of data and not iterate over it. 
This can be done using __st_first_row__ function that works like __st_query__ but also calls __rs_begin__  
In case when __rs__ is empty or contains multiple rows exceptions will be thrown (__empty_row_access__ or __multiple_rows_query__)
``
string name;
int age;
edba::rowset<> rs = sess 
	<< "SELECT name, age FROM students WHERE id=:id" << 10 << edba::first_row >> name >> age;
``
[heading Rowset of Different Types]
You may instantiate __rs__ with any type supported by edba. 
``
#include <edba/types_support/std_tuple.hpp> // Enable support for C++11 std::tuple

...

typedef std::tuple<
	int,          // id
	std::string,  // name
	int,          // age
	double        // gpa
> student_info;

// Select students with gpa > 4.0
edba::rowset<student_info> rs = sess << "SELECT id, name, age, gpa FROM students WHERE gpa > :gpa" << 4.0;

// Copy everything to vector
std::vector<student_info> students(rs.begin(), rs.end());

...

// Now select only 20 years old students
edba::rowset<int> rs = sess << "SELECT id FROM students WHERE age = :age" << 20;

// Copy everything to vector
std::vector<int> ids(rs.begin(), rs.end());
``
Check [link edba.tutorial.types Extending Types Support] section for more information about supported types and how to make edba 
understand your application types

[endsect]

[section Using Session Pool]

To use session managed by session pool, first create pool by passing driver instance, connection string and optional max pool size.
[br]Then call either __sp_open__ or __sp_try_open__ to obtain session object. The later will not block if session pool has no available sessions to return.

``
// Create the pool with max size = 4
edba::pool my_pool(driver::sqlite3(), "db=test.db", 4);

// Obtain session
session sess = my_pool.open();  // Will block if pool has no free sessions
...
session sess;
if (my_pool.try_open(sess))     // Will never block, instead return false if pool has no free sessions
{
	// Do query 
}

// When session object is destroyed the underlying connection will be returned to the pool
``

[heading Configuring a Session]

It is useful to be able to setup some generic session options that are usually set only once and kept during all the session. 
It may be things like transaction isolation level, durability options and more.
``
void invoke_once(edba::session &sql)
{
    sql << "PRAGMA read_uncommited=1" << edba::exec;
}
...
edba::pool my_pool(driver::sqlite3(), "db=test.db", 4);
my_pool.invoke_on_connect(&invoke_once);
``
Please note that any function like object that receive as a parameter the sql sesion can be used as callback:
``
struct config 
{
	int uncommited;
	void operator()(edba::session &sql) const // operator ()
	{
		sql << "PRAGMA read_uncommited=:1" << uncommited << edba::exec;
	}
	config(int val ) : uncommited(val)
	{
	}
};

edba::pool my_pool(driver::sqlite3(), "db=test.db", 4);
my_pool.invoke_on_connect(config(commit_mode));
``
[heading Connection Specific Data]

If more complex configuration of the session is required it is possible to associate any user object with a underlying connection using 
__s_get_specific__ and __s_set_specific__ functions.
``
struct data 
{
    int foo;
    string bar;
};
...
data d;
d.foo = 42;
d.bar = "Hello";

sess.set_specific(d);                    // data object will be copied here
...
data& dref = sess.get_specific<data&>(); // objects may be extracted by value, reference or const reference
``
Generally speaking, underlying connection object simply use __boost_any__ to store user data, so you may refer on behaviour 
specific to __boost_any__.

[endsect]

[section Handling Transactions]
[endsect]

[section Escaping Strings]
[endsect]

[section:types Extending Types Support]
[endsect]

[section Syntax for Database Specific Statements]
[endsect]

[section Multithreading]
All objects, except session_pool are NOT thread-safe. Simple and efficient approach is to use __sp__ 
to get session whenever you need to do query and release it after the job is done.
[endsect]

[section String Conversions]
[endsect]

[section Monitoring Statement Execution]
[endsect]

[endsect]

[section:options Connection String Options]
[endsect]

[xinclude reference.xml]
